buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.ycengine.tourist"
        minSdkVersion 19
        /**
         * YCNOTE - 마시멜로우(API 23, Android 6.0) : targetSdkVersion
         * 지금 마시멜로우 폰에서 플레이스토어에 있는 내 앱을 설치하면 오류가 발생할까요?
         * 그렇지 않습니다.
         * 안드로이드에서 targetSdkVersion가 23버전보다 아래라면 앱이 설치되면 모든 권한이 허용되어있는 상태에서 시작합니다.
         * 아직 마음의 준비가 안되셨다면 targetSdkVersion을 22로 두고 개발하세요.
         * 단, 이미 targetSdkVersion을 23으로 올리셨다면 22로 내릴수 없습니다.
         * 하지만 위에서 언급한것처럼 사용자가 직접 설정페이지에서 해당 권한을 거부할 수도 있습니다.
         * 사용자가 수동으로 설정페이지에서 권한을 없애버리면 내 앱은 오류가 발생할까요?
         * 앱이 오류가 발생해서 죽지는 않습니다. 해당 권한을 사용하는 기능을 사용하지 못할뿐입니다.
         * 현재 배포되어있는 앱은 오류를 방지하기위한 최소한의 장치로 생각하고 우리는 최대한 빨리 마시멜로우 권한획득에 관한 대응을 해놓아야 합니다.
         */
        targetSdkVersion 25
        versionCode 1
        versionName "0.0.1"
        /**
         * multidex 구성을 사용하도록 앱 프로젝트를 설정하려면 앱이 지원하는 최소 Android 버전에 따라 앱 프로젝트에서 다음 내용을 변경해야 할 수 있습니다.
         * minSdkVersion이 21 이상으로 설정되어 있을 경우 아래와 같이 모듈 수준의 build.gradle 파일에서 multiDexEnabled를 true로 설정하기만 하면 됩니다.
         * 그러나 minSdkVersion이 20이하로 설정되어 있으면 다음과 같이 multidex 지원 라이브러리를 사용해야 합니다.
         * compile 'com.android.support:multidex:1.0.2'
         */
        multiDexEnabled true
    }
    buildTypes {
        release {
            /**
             * YCNOTE - 프로가드(proguard)
             * 하드코딩한 string type의 요소들은 난독화 되지 않는다.
             * 그러니 코드를 작성할 때 string을 하드코딩하지않고 따로 상수 클래스에 모아서 사용하는 것을 추천한다.
             *
             * zipAlignEnabled = APK 안의 리소스 파일 등의 미압축 데이터를 4바이트 단위로 정렬할지 여부
             *     Android에서는 데이터가 4바이트 단위로 정렬되어 있을 때에 효율적으로 데이터에 접근할 수 있다.
             * minifyEnabled - true = proguard 적용, false = proguard 미 적용
             * proguard-android.txt는 android SDK폴더의 tools/proguard/proguard-android.txt에서 수정 할 수 있다.
             * 추가로 규칙을 정의해 별도로 *-rules.pro 파일을 아래와 같이 적용시켜 주면 기본설정을 변경하지 않고 추가 설정을 할 수 있다
             */
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig getSigningConfig()
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "Tourist_${variant.versionName}.apk"
                }
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dexOptions {
        // dex의 크기를 늘리기 위한 설정(2^16개 초과)
        jumboMode true
        // 앱 구동 시 자바 할당 힙을 지정
        javaMaxHeapSize "4g"
        /**
         * 빌드서버에서 빌드를 하는 경우에는 기존 빌드된 결과물을 재활용하는 대신 항상 클린 빌드를 수행할 필요가 없어요.
         * 따라서 그래들 증분 빌드의 효과를 누릴 수가 없어요.
         * 하지만, 기본적으로 그래들 안드로이드 플로그인은 증분 빌드 기능을 최적화 하기 위하여 최초 빌드시 모든 서브 모듈들을 pre-dexing 하는 작업을 수행해요.
         * 다만, 이런 경우 첫 번째 빌드 시에는 더 오랜 시간이 걸리게 되며 빌드 서버에서는 별로 적절하지 않은 작업이 된다.
         * 따라서 안드로이드 그래들 플러그인의 preDexLibraries 속성을 사용하지 않도록 아래와 같이 사용하는 것이 좋아요
         */
        preDexLibraries = false
    }
    dataBinding {
        enabled = true
    }
}

/**
 YCNOTE - AAR(Android Archive package)

 Android Archive package의 약자로 안드로이드 Library용 압축 형태의 파일이다.
 Java에서 Library용으로 자주 사용되는 파일의 확장자는 JAR (Java Archive files) 이다.
 안드로이드 AAR 파일은 이와 같은 컨셉으로 사용된다. AAR 파일은 소스코드 뿐만 아니라 안드로이드 Resources 들이 포함된다.

 AAR 파일은 아래 파일들의 압축된 형태를 제공한다.
 /AndroidManifest.xml (필수)
 /classes.jar (필수)
 /res/ (필수)
 /R.txt (필수)
 /assets/ (선택)
 /libs/*.jar (선택)
 /jni/<abi>/*.so (선택)
 /proguard.txt (선택)
 /lint.jar (선택)

 (1) build.gradle 파일의 맨 위 apply plugin: 'com.android.application' 부분을 apply plugin: 'com.android.library'로 수정한다.
 (2) defaultConfig 부분의 applicationId 라인을 삭제한다.
 (3) gradle 적용을 위해 상단 Sync Now를 클릭

 Library Package 파일인 AAR(Android Archive package)파일을 생성한다.
 Android Studio창의 우측 끝부분을 보면 Gradle 메뉴가 보인다. 이 아이콘을 클릭한다.
 창에 아무것도 뜨지 않는다면 Refresh(새로고침) 아이콘을 클릭하면 Gradle Project 들이 표시된다.
 가장 상위에 있는 project를 클릭하고 4번째 아이콘인 Execute Gradle Task를 클릭한다.
 Run Gradle Task 다이얼로그 창의 Command Line에 aR 을 입력하고 실행한다.
 (aR은 assembleRelease 의 약자로 Release버전의 AAR파일을 빌드하는 명령어이다, aR 대신 assembleRelease를 입력해도 무관하다)
 아래와 같이 BUILD SUCCESSFUL이 보이면 정상적으로 빌드가 완료된 것.
 생성된 app-release.aar 파일은 [프로젝트 명]\app\build\outputs\aar 폴더에서 확인가능하다.

 Maven은 transitive dependencies(의존성 전이)라고 해서 한다리 건너의 의존 라이브러리까지도 알아서 가져오는 기능을 제공합니다.
 Buildr도 아직 완벽하지는 않지만 의존성 전이를 지원합니다. 바로 transitive 메소드가 있습니다.
 */
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':_yclibrary')
    compile 'com.google.firebase:firebase-ads:11.8.0'
    compile 'com.google.firebase:firebase-core:11.8.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile 'com.android.support:cardview-v7:27.1.0'
    // https://github.com/square/retrofit
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    // https://github.com/square/retrofit/tree/master/retrofit-converters/gson
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    // https://github.com/square/retrofit/tree/master/retrofit-converters/simplexml
    compile('com.squareup.retrofit2:converter-simplexml:2.3.0') {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    // https://github.com/square/okhttp/tree/master/okhttp-logging-interceptor
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.0'
}

apply plugin: 'com.google.gms.google-services'
